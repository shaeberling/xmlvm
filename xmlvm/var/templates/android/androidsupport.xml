<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." name="android-support">

	<path id="android.antlibs">
		<pathelement path="${sdk.dir}/tools/lib/anttasks.jar" />
		<pathelement path="${sdk.dir}/tools/lib/sdklib.jar" />
		<pathelement path="${sdk.dir}/tools/lib/androidprefs.jar" />
		<pathelement path="${sdk.dir}/tools/lib/apkbuilder.jar" />
		<pathelement path="${sdk.dir}/tools/lib/jarutils.jar" />
	</path>

	<!-- Custom Android task to deal with the project target, and import the proper rules.
		 This requires ant 1.6.0 or above. -->
	<taskdef name="setup"
		classname="com.android.ant.SetupTask"
		classpathref="android.antlibs"/>

	<!-- Execute the Android Setup task that will setup some properties specific to the target,
		 and import the build rules files. -->
	<setup />

	<!-- This file is required for the various xmlvm related tasks -->
	<import file="xcode.xml"/>

	<target depends="-resource-src" name="-res-compile" unless="bootclasspath1.available"/>
	<target depends="-resource-src" if="bootclasspath1.available" name="-res-compile1"/>
	
	<!-- initialize android variables -->
	<target name="init">
		<property file="nbproject/private/config.properties"/>
		<property file="nbproject/project.properties"/>
		<available file="${xmlvm.sdk.jar}" property="xmlvm.jar.exists"/>
		<property name="main.class" value="android.internal.AndroidAppLauncher"/>
		<property name="run.classpath" value="${out.classes.dir}"/>
		<property name="application.args" value=""/>
	</target>

	<!-- Use Android bootstrap files for compilation -->
	<target name="-use-android-libraries" if="run-in-android">
		<echo message="Compilation with Android libraries"/>
		<presetdef name="xmlvm.ajavac">
			<javac bootclasspathref="android.target.classpath"/>
		</presetdef>
	</target>

	<!-- Use XMLVM library for compilation -->
	<target name="-use-xmlvm-libraries" unless="run-in-android">
		<echo message="Compilation with XMLVM libraries"/>
		<antcall target="-xmlvm-exists"/>
		<presetdef name="xmlvm.ajavac">
			<javac>
				<classpath>
					<pathelement location="${xmlvm.sdk.jar}"/>
				</classpath>
			</javac>
		</presetdef>
	</target>

	<target name="aresources" depends="-resource-src,-aidl"/>

	<!-- Perform compilation task. It is similar with the Android task, with tweaked javac and call of -xcode-resources at the end -->
	<target name="compile" depends="aresources,-x-pre-init,-x-post-init,-use-android-libraries,-use-xmlvm-libraries,-do-compile,-xcode-resources"
				description="Compiles project's .java files into .class files"/>

	<target name="-do-compile">
		<!-- If android rules are used for a test project, its classpath should include
			 tested project's location -->
		<condition property="extensible.classpath" value="${tested.project.absolute.dir}/bin/classes" else=".">
			<isset property="tested.project.absolute.dir" />
		</condition>
		<condition property="extensible.libs.classpath" value="${tested.project.absolute.dir}/libs" else="./libs">
			<isset property="tested.project.absolute.dir" />
		</condition>
		<xmlvm.ajavac encoding="utf-8" target="1.5" debug="true" extdirs=""
				destdir="${out.classes.absolute.dir}"
				verbose="${verbose}" classpath="${extensible.classpath}"
				classpathref="android.libraries.jars">
			<src path="${source.absolute.dir}" />
			<src path="${gen.absolute.dir}" />
			<src refid="android.libraries.src" />
			<classpath>
				<fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
				<fileset dir="${extensible.libs.classpath}" includes="*.jar" />
			</classpath>
		</xmlvm.ajavac>
	</target>

	<target name="-trigger-android-task" depends="install">
		<taskdef name="amanifest" classname="org.xmlvm.ant.AndroidManifestParser" classpath="${xmlvm.sdk.jar}"/>
		<amanifest manifest="AndroidManifest.xml"/>
		<exec executable="${sdk.dir}/tools/adb" failonerror="true">
			<arg value="shell"/>
			<arg value="am start -n ${xmlvm.android.package}/${xmlvm.android.activity}"/>
		</exec>
	</target>

	<!-- Properly clean up project -->
	<target name="clean" description="Removes output files created by other targets." depends="init,-xcode-clean">
		<delete dir="${out.absolute.dir}" verbose="${verbose}" />
		<delete dir="${dist.dir}" verbose="${verbose}" />
		<delete includeemptydirs="true">
			<fileset dir="${gen.absolute.dir}" includes="**/*"/>
		</delete>
	</target>

</project>
