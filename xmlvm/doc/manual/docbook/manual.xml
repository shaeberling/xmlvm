<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"docbook/dtd/xml/4.3/docbookx.dtd">
<article>

<title>XMLVM User Manual</title>

<section id="introduction"><title>Introduction</title>

<para>
XMLVM is a flexible cross-compilation framework. Instead of
cross-compiling source code of high-level programming languages, XMLVM
translates byte code instructions. Byte code instructions are
represented by XML-tags and the cross-compilation is done via XSL
stylesheets. This chapter gives an introduction to XMLVM. 
<xref linkend="overview" xrefstyle="select:label"/> provides a brief overview of the XMLVM toolchain.
<xref linkend="getting_xmlvm" xrefstyle="select:label"/> describes how to obtain the source
code of XMLVM and <xref linkend="compiling_xmlvm" xrefstyle="select:label"/> how to build XMLVM
from source. The various command line options supported by XMLVM are
described in <xref linkend="invoking_xmlvm" xrefstyle="select:label"/>.
</para>


<section id="overview"><title>Overview</title>

<para>
XMLVM supports byte code instructions from two popular virtual
machines: the Java Virtual Machine (JVM) and the Common Language
Runtime (CLR) that is part of the .NET framework. The name XMLVM is
inspired by the fact that byte code instructions are represented via
XML. Each byte code instruction is mapped to a corresponding XML-tag.
Transformations of XMLVM programs are done via XSL stylesheets.
<xref linkend="toolchain" xrefstyle="select:label"/> shows all possible paths through the XMLVM
toolchain.
</para>

<figure id="toolchain"><title>XMLVM Toolchain</title>
<mediaobject>
      <imageobject>
            <imagedata fileref="xmlvm_toolchain.jpg" format="JPEG"/>
      </imageobject>
</mediaobject>
</figure>

<para>
The first step in using XMLVM is to compile a Java or .NET source code
program to byte code. This is done with a native compiler such as Sun
Microsystem's <command>javac</command> or Microsoft's Visual Studio. The resulting
byte code program (either a Java <command>.class</command> file or a .NET
<command>.exe</command> file) is fed into the XMLVM toolchain where it is first
converted to XML. XMLVM<subscript>JVM</subscript> denotes an XMLVM program that contains
JVM byte code instructions, whereas a XMLVM<subscript>CLR</subscript> program contains
CLR byte code instructions. It is possible to cross-compile
XMLVM<subscript>CLR</subscript> to XMLVM<subscript>JVM</subscript> with the help of a data flow analysis
(denoted as XMLVM<subscript>DFA</subscript> in <xref linkend="toolchain" xrefstyle="select:label"/>).
</para>

<para>
XMLVM<subscript>JVM</subscript> serves as the canonical representation within the XMLVM
toolchain in the sense that it separates the frontend from the
backend. That is to say, all code generating backends use
XMLVM<subscript>JVM</subscript> as their input. As can be seen in
<xref linkend="toolchain" xrefstyle="select:label"/>, various paths through the XMLVM toolchain
are possible. For example, .NET programs can be cross-compiled to Java
class files and Java class files can be cross-compiled to JavaScript
amongst others.
</para>

<para>
<table id="xmlvm_completeness"><title>Completeness of various XMLVM backends</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>
<colspec colname='c1'/>
<colspec colname='c2'/>
<colspec colname='c3'/>
<thead>
<row>
	<entry morerows='1'>To:</entry>
	<entry namest="c2" nameend="c3" align="center">From:</entry>
</row>
<row>
	<entry align="center">JVM</entry>
	<entry align="center">CLR</entry>
</row>
</thead>
<tbody>
<row>
	<entry>C++</entry>
	<entry>Language cross-compilation only. No library support.</entry>
	<entry>Language cross-compilation only. No library support.</entry>
</row>
<row>
	<entry>JavaScript</entry>
	<entry>Compatibility library for a subset of AWT.</entry>
	<entry>Compatibility library for a subset of WinForms</entry>
</row>
<row>
	<entry>Python</entry>
	<entry>Language cross-compilation only. No library support.</entry>
	<entry>Language cross-compilation only. No library support</entry>
</row>
<row>
	<entry>.NET</entry>
	<entry>Language cross-compilation only for a subset of JVM instructions.</entry>
	<entry>N/A</entry>
</row>
<row>
	<entry>Java</entry>
	<entry>N/A</entry>
	<entry>Support for most .NET instructions. No support for generics. Compatibility library for a subset of WinForms.</entry>
</row>
<row>
	<entry>Objective-C</entry>
	<entry>Most of language cross-compilation. Compatibility libraries for a subset of Cocoa.</entry>
	<entry>Language cross-compilation only. No library support.</entry>
</row>
</tbody>
</tgroup>
</table>
</para>

<para>
The byte code level cross-compilation is only one aspect of XMLVM. The
XMLVM distribution also contains compatibility libraries for the
various targets. For example, When cross-compiling from C# to
Java class files, XMLVM contains a compatibility library for WinForms (the
Microsoft GUI library) written in Java. This allows C# desktop
applications to be cross-compiled to Java desktop applications. Similarly,
when cross-compiling from Java to JavaScript, XMLVM features a
compatibility library for AWT/Swing written in JavaScript that
effectively allows to cross-compile Java desktop applications to AJAX
applications.
</para>

<para>
It should be noted that XMLVM is a research project and as such lacks
the completeness of a commercial product. Each individual backend
requires a significant effort to support different APIs. WinForms,
AWT/Swing, and Cocoa are all complex libraries and at this point XMLVM
only supports a subset of each. The various paths through the XMLVM
toolchain have different levels of maturity that should be taken
into consideration when using XMLVM. <xref linkend="xmlvm_completeness" xrefstyle="select:label"/>
gives an overview of the completeness of
the various backends. An in-depth overview of the theoretical
foundations of XMLVM can be found in <citation>Puder09a</citation>.
</para>

</section>

<section id="getting_xmlvm"><title>Getting XMLVM</title>


<para>XMLVM is released under the GPL v2 license and is hosted at
<ulink url="http://sourceforge.net/projects/xmlvm/">SourceForge</ulink>.
We currently do not offer pre-compiled binary packages.
The only way to obtain XMLVM is to checkout the latest version from
the Subversion repository. You will need a Subversion client to do
this. If you are using a command line version of Subversion, you can
checkout the trunk of the XMLVM repository via the following command:
</para>

<para><programlisting>
svn co https://xmlvm.svn.sourceforge.net/svnroot/xmlvm/trunk/xmlvm
</programlisting>
</para>

<para>
Note that this will give you a read-only version of the repository.
You will be able to update (which you should do frequently) but not
commit changes to the repository. If you find a bug, please send a
mail to the <ulink url="https://lists.sourceforge.net/lists/listinfo/xmlvm-users">XMLVM mailing list</ulink>.
</para>

<para>
XMLVM is developed using the Eclipse IDE. You can also checkout the
sources of XMLVM via Eclipse (using an appropriate Subversion plugin
such as <ulink url="http://subclipse.tigris.org/">Subclipse</ulink> or
<ulink url="http://www.eclipse.org/subversive/">Subversive</ulink>. The XMLVM sources contain
<command>.project</command> and <command>.classpath</command> files so that Eclipse will
recognize XMLVM as an Eclipse project. The benefit of using Eclipse is
that it makes it easy to navigate the source code if you intend to
study the internals of XMLVM. There are also numerous Eclipse launch
configurations (in the <command>etc/</command> directory) that allow the
invocation of various demos.
</para>

</section>

<section id="compiling_xmlvm"><title>Compiling XMLVM</title>

<para>
XMLVM depends on numerous third-party libraries such as BCEL, JDOM, and
Saxon. All these libraries are also released under an Open Source
library. To facilitate the compilation process, XMLVM contains binary
versions (i.e., jars) of all required libraries. All third-party
libraries are contained in the <command>lib</command> directory. Building XMLVM
from sources requires Java 1.6 as well as ant. In order to compile
XMLVM from command line, simply run ant in the XMLVM root directory:
</para>

<para><programlisting>
    cd xmlvm
    ant
</programlisting></para>

<para>
After a successful run of ant, there should be a <command>dist</command>
directory. The ant script packages all dependent libraries and XMLVM's
own class files into one jar file. The only file needed to run XMLVM
is the jar file <command>dist/xmlvm.jar</command>. This jar file can be copied
to a convenient location. The following section explains how to run
XMLVM. The directory <command>dist/demo/</command> contains several demos to
highlight the various aspects of XMLVM.
</para>

</section>

<section id="invoking_xmlvm"><title>Invoking XMLVM</title>

<para>
As mentioned in the previous section, the ant script will package the
binaries of XMLVM into one jar file. By default, this jar file is
located in <command>dist/xmlvm.jar</command> after a successful compilation of
XMLVM. Java 1.6 is needed to run XMLVM. Invoking XMLVM can be done in
the following way:
</para>

<para><programlisting>
    java -jar dist/xmlvm.jar
</programlisting></para>

<para>
Command line options can be appended at the end of the command line
such as:
</para>

<para><programlisting>
    java -jar dist/xmlvm.jar --version
</programlisting></para>

<para>
The various byte code transformations and code generators can be
invoked via appropriate command line options. <xref linkend="cli_options" xrefstyle="select:label"/>
 explains all available command line
options and <xref linkend="cli_examples" xrefstyle="select:label"/> gives some
examples. Note that at this point we only give an overview of the
command line options. Refer to subsequent chapters for more detailed
information on the various backends.
</para>

<section id="cli_options"><title>Command Line Options</title>

<para>
XMLVM can be invoked by running the executable jar file called
<command>xmlvm.jar</command>. In the following we assume that an alias called
xmlvm is defined to invoke XMLVM. Under Unix, this can be
accomplished via the following command:
</para>

<para><programlisting>
    alias xmlvm="java -jar (pwd)/dist/xmlvm.jar"
</programlisting></para>

<para>
The behavior of XMLVM is controlled by numerous command line
arguments. xmlvm reads in one or more source files, processes them
according to the command line options, and then writes out one or more
destination files.
</para>

<variablelist>
<varlistentry>
	<term><command>--in=&lt;path&gt;</command></term>
	<listitem><para>The source files are specified via one or more <command>--in</command>
  options. If the argument passed to  <command>--in</command> is a directory,
  then this directory is traversed recursively and all files with the
  suffix  <command>.class</command>,  <command>.exe</command>, or  <command>.xmlvm</command> are
  processed. Files with other suffixes are ignored. It is possible to
  use wildcards to filter out certain files. It is possible to specify
  multiple  <command>--in</command> parameters. At least one  <command>--in</command> 
  parameter is required.</para></listitem>
</varlistentry>
</variablelist>

</section>

<section id="cli_examples"><title>Examples</title>

<para>...</para>

</section>
</section>
</section>

<bibliography id="bibliography">
<title>Bibliography</title>

<biblioentry>
<abbrev>Puder09a</abbrev>
<authorgroup>
	<author><firstname>Arno</firstname><surname>Puder</surname></author>
	<author><firstname>Jessica</firstname><surname>Lee</surname></author>
</authorgroup>
<title>Towards an XML-based Byte Code Level Transformation Framework</title>
<publishername>Elsevier</publishername>
<pubdate>March 2009</pubdate>
<orgname>4th International Workshop on Bytecode Semantics, Verification, Analysis and Transformation</orgname>
<address>York, UK</address>
</biblioentry>

</bibliography>

</article>
