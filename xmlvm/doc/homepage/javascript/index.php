<?php<<
  include("../header.html");
?>
<tr>
  <td>
    <div id="content_top">
      <a href="../toolchain">Toolchain</a> | <a href="../frontend">Frontend</a> | <a href="../clr2jvm">CLR to JVM</a> | <b>JavaScript</b> | <a href="../iphone">iPhone/Objective-C</a>
    </div>
  </td>
</tr>
<tr>
  <td id="main_content_td">
    <div id="main_content">
          
<h1>Details: JavaScript</h1>

<p>
<a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX</a>
(Asynchronous JavaScript and XML) has become very popular for building
web applications. AJAX basically proposes to move part of the
application to the browser without requiring a JRE-plugin. In order to
do so the application needs to be written in JavaScript since
JavaScript is the lowest common denominator across different web
browsers in terms of prerequisites. Writing portable JavaScript is a
daunting and tedious task. With the help of XMLVM, Java applications
can be cross-compiled to portable JavaScript. By doing so, XMLVM
shields the web-developer from the intrinsic complexities of writing
cross-browser portable JavaScript code. As a consequence, a
web-developer never has to write or even look at one line of
JavaScript code.
</p>
<p>
The XMLVM generated by the <a href="../frontend">front-end</a> can be mapped
to JavaScript using XSL stylesheets. The general approach is to mimic
the stack-based virtual machine in the target language by declaring
helper variables for the stack and stack-pointer. Consider the
<tt>&lt;jvm:irem&gt;</tt> instruction (<em>integer remainder</em>) that pops two integers off
the stack and pushes the remainder after division back onto the stack.
Using the following XSL template, the <tt>&lt;jvm:irem&gt;</tt> instruction can be
mapped to JavaScript:
</p>
<div class="code_block">
<p>
<?php
print_code("<xsl:template match=\"jvm:irem\">\n".
"  <xsl:text>\n".
"    __op2 = __stack[--__sp]; // Pop operand 1\n".
"    __op1 = __stack[--__sp]; // Pop operand 2\n".
"    __stack[__sp++] = __op1 % __op2; // Push remainder\n".
"   </xsl:text>\n".
"</xsl:template>\n");
?>
</p>
</div>
<p>
Variable <tt>__stack</tt> represents the runtime stack, whereas <tt>__sp</tt> refers to
the top of the stack. Pre-decrement and post-increment operations are
used for popping and pushing of arguments respectively. The following
JavaScript program is the cross-compiled version of "Hello World":
</p>

<div class="code_block">
<p>
qx.Class.define(<span style="color:green">"org_xmlvm_test_HelloWorld"</span>, {<br/>
&nbsp;&nbsp;extend: java_lang_Object,<br/>
&nbsp;&nbsp;statics:<br/>
&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;_main___java_lang_String_ARRAYTYPE : <b>function</b>( __arg1)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>var</b> __locals = <b>new</b> Array(1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>var</b> __stack = <b>new</b> Array(2);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>var</b> __sp = 0;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>var</b> __op1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>var</b> __op2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__locals[0] = __arg1;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__stack[__sp++] = java_lang_System._out;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__stack[__sp++] = <b>new</b> java_lang_String(<span style="color:green">"Hello World"</span>);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__sp -= 2;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__stack[__sp]._println___java_lang_String(__stack[__sp + 1]);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;}<br/>
});
</p>
</div>

<p>
Since JavaScript is a prototype-based programming language, we need to
mimic object-oriented features such as class- and method-definitions.
The JavaScript code generated by XMLVM makes use of the object-model
defined by the <a href="http://www.qooxdoo.org">Qooxdoo project</a>. E.g., the Qooxdoo
function <tt>qx.Class.define</tt> defines a new class. Since JavaScript does not
support overloading, XMLVM uses name-mangling to differentiate between
different overloaded version of a method. We also use Qooxdoo's
extensive GUI library to implement Java's AWT/Swing widgets in
JavaScript. XMLVMs philosophy is to cross-compile AWT/Swing desktop
applications to an AJAX application.
</p>
<p>
Below you can see a demo of a more complex application. On the left
you can see a screenshot of a Java application implementing a simple
calculator. Click <a href="Calculator.java">here</a> to view the
Java source code of this application. Using XMLVM, this Java
application is automatically translated to an AJAX application. On the
right hand side you can see the actual calculator running as an AJAX
application. Try out a calculation such as "21 * 2"! Click <a
href="Calculator.js">here</a> to view the source of the AJAX
calculator application to see the generated JavaScript code.
</p>
<p>
[Calculator demo]
</p>

<?php
  include("../footer.html");
?>