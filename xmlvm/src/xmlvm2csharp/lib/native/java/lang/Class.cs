// Automatically generated by xmlvm2csharp (do not edit).

using global::org.xmlvm;
namespace java.lang {
public class Class: global::java.lang.Object,global::java.io.Serializable,global::java.lang.reflect.AnnotatedElement,global::java.lang.reflect.GenericDeclaration,global::java.lang.reflect.Type {
private static void initNativeLayer(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: void initNativeLayer()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: void initNativeLayer()]
}

public static global::System.Object getStackClasses(int n1, bool n2){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class[] getStackClasses(int, boolean)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class[] getStackClasses(int, boolean)]
}

public static global::System.Object forName(global::java.lang.String n1, bool n2, global::java.lang.ClassLoader n3){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader)]
    org.xmlvm._nTIB myTIB = org.xmlvm._nTIB.javaTypeNameToTIB(n1);
    Class result = myTIB.getClass();
    if (result==null) {
        result = new Class();
        result.@this(myTIB);
        myTIB.setClass(result);
    }
    return result;
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader)]
}

public virtual global::System.Object getClasses(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class[] getClasses()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class[] getClasses()]
}

public virtual void verify(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: void verify()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: void verify()]
}

public virtual global::System.Object getAnnotation(global::java.lang.Class n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)]
}

public virtual global::System.Object getAnnotations(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()]
}

public virtual global::System.Object getComponentType(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class getComponentType()]
    return ((org.xmlvm._nTIB)this._ftib).getComponentType();
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class getComponentType()]
}

public virtual global::System.Object getConstructors(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Constructor[] getConstructors()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Reflection.BindingFlags bindingFlags
        = global::System.Reflection.BindingFlags.DeclaredOnly
          // | global::System.Reflection.BindingFlags.Static
          | global::System.Reflection.BindingFlags.Instance
          | global::System.Reflection.BindingFlags.Public
          | global::System.Reflection.BindingFlags.NonPublic;
    global::System.Reflection.MemberInfo[] constructorInfos 
        = nativeType.FindMembers(global::System.Reflection.MemberTypes.Method,
                                 bindingFlags, global::System.Type.FilterNameIgnoreCase, "this");
    global::System.Collections.Generic.IList<java.lang.reflect.Constructor> jConstructors 
        = new global::System.Collections.Generic.List<java.lang.reflect.Constructor>();
    // note each MemberInfo is casted to MethodInfo:
    foreach (global::System.Reflection.MethodInfo constructorInfo in constructorInfos) {
        java.lang.reflect.Constructor jConstructor
            = org.xmlvm._nMemberInfoAdapter<global::System.Reflection.MethodInfo,
                                            java.lang.reflect.Constructor._nImpl>.getJavaClient(constructorInfo);
        jConstructors.Add(jConstructor);
    }
    java.lang.reflect.Constructor[] jConstructorArray = new java.lang.reflect.Constructor[jConstructors.Count];
    jConstructors.CopyTo(jConstructorArray, 0);
    return new org.xmlvm._nArrayAdapter<object>(jConstructorArray);
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Constructor[] getConstructors()]
}

public virtual global::System.Object getDeclaredAnnotations(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()]
}

public virtual global::System.Object getDeclaredClasses(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class[] getDeclaredClasses()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class[] getDeclaredClasses()]
}

public virtual global::System.Object getDeclaredConstructors(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Reflection.BindingFlags bindingFlags
        = global::System.Reflection.BindingFlags.DeclaredOnly
          // | global::System.Reflection.BindingFlags.Static
          | global::System.Reflection.BindingFlags.Instance
          | global::System.Reflection.BindingFlags.Public
          | global::System.Reflection.BindingFlags.NonPublic;
    global::System.Reflection.MemberInfo[] constructorInfos 
        = nativeType.FindMembers(global::System.Reflection.MemberTypes.Method,
                                 bindingFlags, global::System.Type.FilterNameIgnoreCase, "this");
    global::System.Collections.Generic.IList<java.lang.reflect.Constructor> jConstructors 
        = new global::System.Collections.Generic.List<java.lang.reflect.Constructor>();
    // note each MemberInfo is casted to MethodInfo:
    foreach (global::System.Reflection.MethodInfo constructorInfo in constructorInfos) {
        java.lang.reflect.Constructor jConstructor
            = org.xmlvm._nMemberInfoAdapter<global::System.Reflection.MethodInfo,
                                            java.lang.reflect.Constructor._nImpl>.getJavaClient(constructorInfo);
        jConstructors.Add(jConstructor);
    }
    java.lang.reflect.Constructor[] jConstructorArray = new java.lang.reflect.Constructor[jConstructors.Count];
    jConstructors.CopyTo(jConstructorArray, 0);
    return new org.xmlvm._nArrayAdapter<object>(jConstructorArray);
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()]
}

public virtual global::System.Object getDeclaredField(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)]
}

public virtual global::System.Object getDeclaredFields(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Reflection.BindingFlags bindingFlags
        = global::System.Reflection.BindingFlags.DeclaredOnly
          | global::System.Reflection.BindingFlags.Static
          | global::System.Reflection.BindingFlags.Instance
          | global::System.Reflection.BindingFlags.Public
          | global::System.Reflection.BindingFlags.NonPublic;
    global::System.Reflection.FieldInfo[] fieldInfos 
        = nativeType.GetFields(bindingFlags);
    java.lang.reflect.Field[] jFields = new java.lang.reflect.Field[fieldInfos.Length];
    for (int i=0; i<fieldInfos.Length; i++) {
        global::System.Reflection.FieldInfo fieldInfo = fieldInfos[i];
        java.lang.reflect.Field jField 
            = org.xmlvm._nMemberInfoAdapter<global::System.Reflection.FieldInfo, 
                                            java.lang.reflect.Field._nImpl>.getJavaClient(fieldInfo);
        jFields[i] = jField;
    }
    return new org.xmlvm._nArrayAdapter<object>(jFields);
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()]
}

public virtual global::System.Object getDeclaredMethods(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Reflection.BindingFlags bindingFlags
        = global::System.Reflection.BindingFlags.DeclaredOnly
          | global::System.Reflection.BindingFlags.Static
          | global::System.Reflection.BindingFlags.Instance
          | global::System.Reflection.BindingFlags.Public
          | global::System.Reflection.BindingFlags.NonPublic;
    global::System.Reflection.MethodInfo[] methodInfos 
        = nativeType.GetMethods(bindingFlags);
    global::System.Collections.Generic.IList<java.lang.reflect.Method> jMethods 
        = new global::System.Collections.Generic.List<java.lang.reflect.Method>();
    foreach (global::System.Reflection.MethodInfo nativeMethodInfo in methodInfos) {
        java.lang.reflect.Method jMethod
            = org.xmlvm._nMemberInfoAdapter<global::System.Reflection.MethodInfo,
                                            java.lang.reflect.Method._nImpl>.getJavaClient(nativeMethodInfo);
        jMethods.Add(jMethod);
    }
    java.lang.reflect.Method[] jMethodArray = new java.lang.reflect.Method[jMethods.Count];
    jMethods.CopyTo(jMethodArray, 0);
    return new org.xmlvm._nArrayAdapter<object>(jMethodArray);
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()]
}

public virtual global::System.Object getEnclosingClass(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class getEnclosingClass()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class getEnclosingClass()]
}

public virtual global::System.Object getEnclosingConstructor(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()]
}

public virtual global::System.Object getEnclosingMethod(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Method getEnclosingMethod()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Method getEnclosingMethod()]
}

public virtual global::System.Object getEnumConstants(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Object[] getEnumConstants()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Object[] getEnumConstants()]
}

public virtual global::System.Object getField(global::java.lang.String n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Field getField(java.lang.String)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Field getField(java.lang.String)]
}

public virtual global::System.Object getFields(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.reflect.Field[] getFields()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Reflection.BindingFlags bindingFlags
        = global::System.Reflection.BindingFlags.Static
          | global::System.Reflection.BindingFlags.Instance
          | global::System.Reflection.BindingFlags.Public
          | global::System.Reflection.BindingFlags.NonPublic;
    global::System.Reflection.FieldInfo[] fieldInfos 
        = nativeType.GetFields(bindingFlags);
    java.lang.reflect.Field[] jFields = new java.lang.reflect.Field[fieldInfos.Length];
    for (int i=0; i<fieldInfos.Length; i++) {
        global::System.Reflection.FieldInfo fieldInfo = fieldInfos[i];
        java.lang.reflect.Field jField 
            = org.xmlvm._nMemberInfoAdapter<global::System.Reflection.FieldInfo,
                                            java.lang.reflect.Field._nImpl>.getJavaClient(fieldInfo);
        jFields[i] = jField;
    }
    return new org.xmlvm._nArrayAdapter<object>(jFields);

      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.reflect.Field[] getFields()]
}

public virtual global::System.Object getInterfaces(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class[] getInterfaces()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class[] getInterfaces()]
}

public virtual int getModifiers(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: int getModifiers()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: int getModifiers()]
}

public virtual global::System.Object getName(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.String getName()]
    return org.xmlvm._nUtil.toJavaString(((org.xmlvm._nTIB) this._ftib).getJavaName());
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.String getName()]
}

public virtual global::System.Object getSimpleName(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.String getSimpleName()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.String getSimpleName()]
}

public virtual global::System.Object getProtectionDomain(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Object getProtectionDomain()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Object getProtectionDomain()]
}

public virtual global::System.Object getPDImpl(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Object getPDImpl()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Object getPDImpl()]
}

public virtual global::System.Object getSigners(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Object[] getSigners()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Object[] getSigners()]
}

public virtual global::System.Object getSuperclass(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class getSuperclass()]
    org.xmlvm._nTIB myTib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type myNativeType = myTib.getNativeType();
    global::System.Type nativeBaseType = myNativeType.BaseType;
    java.lang.Class javaSuperClass = org.xmlvm._nTIB.getClass(nativeBaseType);
    return javaSuperClass;
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class getSuperclass()]
}

public virtual bool isAnnotation(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isAnnotation()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isAnnotation()]
}

public virtual bool isAnnotationPresent(global::java.lang.Class n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isAnnotationPresent(java.lang.Class)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isAnnotationPresent(java.lang.Class)]
}

public virtual bool isAnonymousClass(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isAnonymousClass()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isAnonymousClass()]
}

public virtual bool isArray(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isArray()]
    return ((org.xmlvm._nTIB) this._ftib).isArray();
//XMLVM_END_WRAPPER[java.lang.Class: boolean isArray()]
}

public virtual bool isAssignableFrom(global::java.lang.Class n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isAssignableFrom(java.lang.Class)]
    org.xmlvm._nTIB myTib = (org.xmlvm._nTIB) this._ftib;
    org.xmlvm._nTIB otherTib = (org.xmlvm._nTIB) n1._ftib;
    global::System.Type myNativeType = myTib.getNativeType();
    global::System.Type otherNativeType = otherTib.getNativeType();
    return myNativeType.IsAssignableFrom(otherNativeType);
//XMLVM_END_WRAPPER[java.lang.Class: boolean isAssignableFrom(java.lang.Class)]
}

public virtual bool isEnum(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isEnum()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isEnum()]
}

public virtual bool isInstance(global::java.lang.Object n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isInstance(java.lang.Object)]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isInstance(java.lang.Object)]
}

public virtual bool isInterface(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isInterface()]
    org.xmlvm._nTIB myTib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type myNativeType = myTib.getNativeType();
    return myNativeType.IsInterface;
//XMLVM_END_WRAPPER[java.lang.Class: boolean isInterface()]
}

public virtual bool isLocalClass(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isLocalClass()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isLocalClass()]
}

public virtual bool isMemberClass(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isMemberClass()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isMemberClass()]
}

public virtual bool isPrimitive(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isPrimitive()]
    return ((org.xmlvm._nTIB)this._ftib).isPrimitive();
//XMLVM_END_WRAPPER[java.lang.Class: boolean isPrimitive()]
}

public virtual bool isSynthetic(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean isSynthetic()]
      throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: boolean isSynthetic()]
}

public virtual global::System.Object newInstance(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Object newInstance()]
    org.xmlvm._nTIB tib = (org.xmlvm._nTIB) this._ftib;
    global::System.Type nativeType = tib.getNativeType();
    global::System.Object obj = global::System.Activator.CreateInstance(nativeType);
    global::System.Reflection.MethodInfo jConstructor = nativeType.GetMethod("this", new global::System.Type[]{});
    jConstructor.Invoke(obj, new object[]{});
    return obj;
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Object newInstance()]
}

private global::System.Object getPackageString(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.String getPackageString()]
      throw new global::org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.String getPackageString()]
}

public virtual bool desiredAssertionStatus(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: boolean desiredAssertionStatus()]
    return false;
//XMLVM_END_WRAPPER[java.lang.Class: boolean desiredAssertionStatus()]
}

public virtual global::System.Object asSubclass(global::java.lang.Class n1){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.Class asSubclass(java.lang.Class)]
    throw new org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.Class asSubclass(java.lang.Class)]
}

private global::System.Object getSignatureAttribute(){
//XMLVM_BEGIN_WRAPPER[java.lang.Class: java.lang.String getSignatureAttribute()]
      throw new global::org.xmlvm._nNotYetImplementedException("native/wrapper method not yet implemented");
//XMLVM_END_WRAPPER[java.lang.Class: java.lang.String getSignatureAttribute()]
}

//XMLVM_BEGIN_WRAPPER[java.lang.Class]
//XMLVM_END_WRAPPER[java.lang.Class]

} // end of class: Class

} // end of namespace: java.lang
