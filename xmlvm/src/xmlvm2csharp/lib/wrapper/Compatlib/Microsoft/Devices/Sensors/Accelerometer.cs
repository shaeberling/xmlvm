// Automatically generated by xmlvm2csharp (do not edit).

using org.xmlvm;
namespace Compatlib.Microsoft.Devices.Sensors {
public class Accelerometer: global::Compatlib.System.Object,global::Compatlib.System.IDisposable {
public global::Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent _fReadingChanged;

public void @this(){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void <init>()]
    _fReadingChanged = new ReadingChangedEvent();
    _fReadingChanged.@this();

    ac.ReadingChanged += ReadingChangedHandler;
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void <init>()]
}

public virtual void Start(){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void Start()]
    ac.Start();
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void Start()]
}

public virtual void Stop(){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void Stop()]
    ac.Stop();
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer: void Stop()]
}

//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer]
private global::Microsoft.Devices.Sensors.Accelerometer ac = new global::Microsoft.Devices.Sensors.Accelerometer();

public void ReadingChangedHandler(object sender, global::Microsoft.Devices.Sensors.AccelerometerReadingEventArgs args)
{
    Compatlib.Microsoft.Devices.Sensors.AccelerometerReadingEventArgs newArgs = new Compatlib.Microsoft.Devices.Sensors.AccelerometerReadingEventArgs();
    newArgs.args = args;
    this._fReadingChanged._1_1fire(this, newArgs);
}
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.Accelerometer]

} // end of class: Accelerometer

} // end of namespace: Compatlib.Microsoft.Devices.Sensors
