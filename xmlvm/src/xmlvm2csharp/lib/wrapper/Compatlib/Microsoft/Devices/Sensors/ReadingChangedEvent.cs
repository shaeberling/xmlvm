// Automatically generated by xmlvm2csharp. Do not edit!

using org.xmlvm;

namespace Compatlib.Microsoft.Devices.Sensors {
public class ReadingChangedEvent: global::Compatlib.System.Event {
public new void @this(){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void <init>()]
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void <init>()]
}

public virtual void _1_1add(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler n1){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __add(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler)]
    this.handlers.Add(n1);
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __add(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler)]
}

public virtual void _1_1fire(Compatlib.System.Object n1, Compatlib.Microsoft.Devices.Sensors.AccelerometerReadingEventArgs n2){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __fire(Compatlib.System.Object, Compatlib.Microsoft.Devices.Sensors.AccelerometerReadingEventArgs)]
    foreach (Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler handler in handlers)
    {
        global::System.Reflection.MethodInfo mi = handler.owner.GetType().GetMethod(org.xmlvm._nUtil.toNativeString(handler.method._fvalue));
        mi.Invoke(handler.owner, new object[] { n1, n2 });
    }
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __fire(Compatlib.System.Object, Compatlib.Microsoft.Devices.Sensors.AccelerometerReadingEventArgs)]
}

public virtual void _1_1remove(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler n1){
//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __remove(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler)]
    this.handlers.Remove(n1);
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent: void __remove(Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler)]
}

//XMLVM_BEGIN_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent]
private global::System.Collections.Generic.List<Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler> handlers = new global::System.Collections.Generic.List<Compatlib.Microsoft.Devices.Sensors.ReadingChangedEventHandler>();
//XMLVM_END_WRAPPER[Compatlib.Microsoft.Devices.Sensors.ReadingChangedEvent]

} // end of class: ReadingChangedEvent

} // end of namespace: Compatlib.Microsoft.Devices.Sensors
