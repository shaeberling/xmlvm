<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (c) 2011 by crossmobile.org

  CrossMobile is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, version 2.

  CrossMobile is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with CrossMobile; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->

<advisor>
    <natives> <!-- Java native types -->
        <native type="void"/>
        <native type="boolean"/>
        <native type="byte"/>
        <native type="short"/>
        <native type="int"/>
        <native type="long"/>
        <native type="float"/>
        <native type="double"/>
        <native type="char"/>
        <native type="Object"/>
    </natives>

    <!-- Pre-set typedefs -->
    <typedefs>
        <typedef java="NSTimeZone" c="CFTimeZoneRef"/>
        <typedef java="String" c="CFStringRef"/>
        <typedef java="NSNumber" c="CFNumberRef"/>
        <typedef java="NSDate" c="CFDateRef"/>
        <typedef java="Object" c="NSUncaughtExceptionHandler"/>
        <typedef java="String" c="NSString"/>
        <typedef java="List" c="NSArray"/>
        <typedef java="List" c="NSMutableArray"/>
        <typedef java="Set" c="NSMutableSet"/>
        <typedef java="Set" c="NSSet"/>
        <typedef java="Map" c="NSDictionary"/>
        <typedef java="Map" c="NSMutableDictionary"/>
        <typedef java="byte" c="char"/>
        <typedef java="Object" c="id"/>
        <typedef java="boolean" c="BOOL"/>
        <typedef java="byte" c="int8_t"/>
        <typedef java="short" c="int16_t"/>
        <typedef java="int" c="int32_t"/>
        <typedef java="long" c="int64_t"/>
        <typedef java="byte" c="uint8_t"/>
        <typedef java="short" c="uint16_t"/>
        <typedef java="int" c="uint32_t"/>
        <typedef java="long" c="uint64_t"/>
        <typedef java="Object" c="uintptr_t"/>
        <typedef java="boolean" c="bool"/>
        <typedef java="int" c="size_t"/>
        <typedef java="int" c="gid_t"/>
        <typedef java="int" c="mach_port_t"/>
        <typedef java="int" c="off_t"/>
        <typedef java="int" c="socklen_t"/>
        <typedef java="int" c="sockaddr"/>
        <typedef java="int" c="uid_t"/>
        <typedef java="byte[]" c="va_list"/>
        <typedef java="Object" c="dispatch_queue_t"/>
        <!-- MIDIServices -->
        <typedef java="int" c="ItemCount"/>
        <typedef java="int" c="ByteCount"/>
    </typedefs>

    <!-- Pre-set objects -->
    <objects>
        <!-- AudioToolBox -->
        <object name="FILE"/>
        <object name="AudioObjectID"/>
        <object name="AudioObjectPropertyAddress"/>
        <object name="AudioObjectPropertyListenerProc"/>
        <object name="FS"/>
        <object name="ComponentDescription"/>
        <object name="CTFontDescriptor"/>
        <object name="ATSFont"/>
        <object name="CGPDFObject"/>
        <object name="CFType"/>
        <object name="CFURL"/>
        <object name="CFAllocator"/>
        <object name="CFLocale"/>
        <object name="CFURL"/>
        <object name="SEL"/>
        <object name="NSZone"/>
        <object name="Protocol"/>
        <object name="NSComparator"/>
        <object name="IMP"/>
        <object name="NSURLHandle"/>
        <object name="NSURLHandleClient"/>
        <object name="NSHost"/>
        <object name="NSPortMessage"/>
        <object name="NSConnection"/>
        <object name="SCNetworkInterface"/>
        <object name="CMFormatDescription"/>
        <object name="MIDIObject"/>
    </objects>

    <!-- Regular expressions to pre-process the source code, to clean up the include files -->
    <replaceables>
        <replace pattern="(?s)/\*.*?\*/"/>
        <replace pattern="//.*"/>
        <replace pattern="\\n"/>
        <replace pattern="@((class)|(protocol))[\w\s,]+?;"/>
        <replace pattern="@package"/>
        <replace pattern="@public"/>
        <replace pattern="@protected"/>
        <replace pattern="@private"/>
        <replace pattern="extern\s*?.C.\s*?\{"/>

        <!-- If these are not defined, they will be mistaken for functions -->
        <replace pattern="__OSX_STREAM_PROPERTIES_DEPRECATED_10_6"/>
        <replace pattern="CA_DEPRECATED"/>
        <replace pattern="(?s)__OSX_AVAILABLE.*?\)"/>
        <replace pattern="(?s)NS_DEPRECATED.*?\)"/>
        <replace pattern="(?s)CF_AVAILABLE.*?\)"/>
        <replace pattern="(?s)CT_AVAILABLE.*?\)"/>
        <replace pattern="(?s)EA_EXTERN_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)MP_EXTERN_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)SK_EXTERN_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)CG_AVAILABLE.*?\)"/>
        <replace pattern="(?s)CORETELEPHONY_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)IMAGEIO_AVAILABLE_STARTING.*?\)"/>
        <replace pattern="(?s)NS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)NS_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)NS_FORMAT_FUNCTION.*?\)"/>
        <replace pattern="(?s)UIKIT_CLASS_AVAILABLE.*?\)"/>
        <replace pattern="(?s)SC_SCHEMA_DECLARATION.*?\)\)"/>
        <replace pattern="(?s)SC_SCHEMA_KV.*?\)"/>
        <replace pattern="(?s)CF_FORMAT_.*?\)"/>

        <replace pattern="NS_REQUIRES_NIL_TERMINATION"/>
        <replace pattern="SC_SCHEMA_DECLARATION"/>
        <replace pattern="__BEGIN_DECLS"/>
        <replace pattern="__END_DECLS"/>
        <replace pattern="(?s)__attribute__\(\(.*?\)\)\)\)\)"/>
        <replace pattern="(?s)__attribute__\(\(.*?\)\)\)\)"/>
        <replace pattern="(?s)__attribute__\(\(.*?\)\)\)"/>
        <replace pattern="(?s)__attribute__\(\(.*?\)\)"/>

        <replace pattern="AL_APIENTRY\s"/>
        <replace pattern="ALC_APIENTRY\s"/>
        <replace pattern="AL_API\s"/>
        <replace pattern="ALC_API\s"/>

        <replace pattern="CORETELEPHONY_EXTERN_CLASS"/>
        <replace pattern="EAGL_EXTERN_CLASS"/>
        <replace pattern="EA_EXTERN_CLASS"/>
        <replace pattern="EA_EXTERN_CLASS_AVAILABLE"/>
        <replace pattern="GK_EXTERN_CLASS"/>
        <replace pattern="MP_EXTERN_CLASS"/>
        <replace pattern="MP_EXTERN_CLASS_AVAILABLE"/>
        <replace pattern="SK_EXTERN_CLASS"/>
        <replace pattern="SK_EXTERN_CLASS_AVAILABLE"/>

        <replace pattern="CA_EXTERN_C_BEGIN"/>
        <replace pattern="CA_EXTERN_C_END"/>
        <replace pattern="CF_EXTERN_C_END"/>
        <replace pattern="CF_EXTERN_C_BEGIN"/>
        <replace pattern="IMAGEIO_EXTERN_C_BEGIN"/>
        <replace pattern="IMAGEIO_EXTERN_C_END"/>
        <replace pattern="QL_EXTERN_C_BEGIN"/>
        <replace pattern="QL_EXTERN_C_END"/>

        <replace pattern="CA_EXTERN"/>
        <replace pattern="CG_EXTERN"/>
        <replace pattern="CF_EXTERN"/>
        <replace pattern="COREDATA_EXTERN"/>
        <replace pattern="CORETELEPHONY_EXTERN"/>
        <replace pattern="EA_EXTERN"/>
        <replace pattern="EAGL_EXTERN"/>
        <replace pattern="GK_EXTERN"/>
        <replace pattern="IMAGEIO_EXTERN"/>
        <replace pattern="MP_EXTERN"/>
        <replace pattern="SK_EXTERN"/>
        <replace pattern="UIKIT_EXTERN"/>

        <replace pattern="CF_EXPORT"/>
        <replace pattern="CFN_EXPORT"/>
        <replace pattern="CM_EXPORT"/>
        <replace pattern="CV_EXPORT"/>
        <replace pattern="FOUNDATION_EXPORT"/>
        <replace pattern="MIDI_EXPORT"/>
        <replace pattern="MT_EXPORT"/>
        <replace pattern="QL_EXPORT"/>
        <replace pattern="QL_PRIVATE_EXPORT"/>
        <replace pattern="VT_EXPORT"/>

        <replace pattern="CG_INLINE"/>
        <replace pattern="CF_INLINE"/>
        <replace pattern="NS_INLINE"/>
        <replace pattern="UIKIT_STATIC_INLINE"/>

        <replace pattern="extern"/>

        <replace pattern="(?s)\\[\n\t\f\r]"/>
        <replace pattern="#.*"/>
        <replace pattern="[\n\t\f\r]" with=" "/>
        <replace pattern=" {1,}" with=" "/>
    </replaceables>

<!--    
    <generics>
        <genericsclass class="NSData" items="2"/>
    </generics>
-->
    <idconflicts>
        <returnid signature="NSObject:accessibilityElementAtIndex:int" object="Object"/>
        <returnid signature="UILocalizedIndexedCollation:currentCollation:" object="UILocalizedIndexedCollation"/>
        <returnid signature="UIPasteboard:valueForPasteboardType:String" object="Object"/>

<!--        
        <argumentid signature="NSMutableData:NSUInteger1">
            <argumentiditem object="Object1"/>
        </argumentid>
        <argumentid signature="NSMutableData:NSUInteger2">
            <argumentiditem object="Object2"/>
            <argumentiditem object="Object3"/>
        </argumentid>
        <argumentid signature="NSMutableData:NSUInteger3">
            <argumentiditem object="Object4"/>
            <argumentiditem object="Object5"/>
            <argumentiditem object="Object6"/>
        </argumentid>
-->
    </idconflicts>
    
<!-- 
    There are cases when 2 constructor selectors have the same signature in Objective-C.
    When mapping this to Java, it causes conflicts. Hence enums are used to identify
    the right constructor. The enum value for each of the constructor is provided using
    the 'value' attribute. 'type' attribute indicates the enum name.
    
    Proposed solution: Make it part of <class> tag. Example is below.
    
    <class name="NSString">        
        <selector name="-initWithString:">
            <conflict type="Type" value="String"/>
        </selector>
        
        <selector name="">
            <conflict type="Type" value="File"/>
        </selector>
    </class>
-->
    <conflicts>
        <constructor signature="NSData::byte[]int" type="Data">
            <citem value="Copy" name="-initWithBytes:length:"/>
            <citem value="Reuse" name="-initWithBytesNoCopy:length:"/>
        </constructor>
        <constructor signature="NSData::String" type="File">
            <citem value="Mapped" name="-initWithContentsOfMappedFile:"/>
            <citem value="Regular" name="-initWithContentsOfFile:"/>
        </constructor>
        <constructor signature="NSDate::double" type="ReferenceDate">
            <citem value="SinceDate" name="-initWithTimeIntervalSinceReferenceDate:"/>
            <citem value="SinceNow" name="-initWithTimeIntervalSinceNow:"/>
            <citem value="Since1970" name="-initWithTimeIntervalSince1970:"/>
        </constructor>
        <constructor signature="NSFileWrapper::NSData" type="ContentType">
            <citem value="NSData" name="-initRegularFileWithContents:"/>
            <citem value="SerializedRepresentation" name="-initWithSerializedRepresentation:"/>
        </constructor>
        <constructor signature="NSFileWrapper::String" type="FileType">
            <citem value="Regular" name="-initWithPath:"/>
            <citem value="SymbolicLinkWithDestination" name="-initSymbolicLinkWithDestination:"/>
        </constructor>
        <constructor signature="NSMutableData::int" type="Data">
            <citem value="Capacity" name="-initWithCapacity:"/>
            <citem value="Length" name="-initWithLength:"/>
        </constructor>
        <constructor signature="NSString::byte[]" type="CStringNullTerminated">
            <citem value="UTF8" name="-initWithUTF8String:"/>
            <citem value="Default" name="-initWithCString:"/>
        </constructor>
        <constructor signature="NSString::byte[]int" type="CString">
            <citem value="UTF8" name="-initWithCString:encoding:"/>
            <citem value="Default" name="-initWithCString:length:"/>
        </constructor>
        <constructor signature="NSString::String" type="Type">
            <citem value="String" name="-initWithString:"/>
            <citem value="File" name="-initWithContentsOfFile:"/>
        </constructor>
        <constructor signature="NSSocketPort::intintintNSData" type="Location">
            <citem value="Default" name="-initWithProtocolFamily:socketType:protocol:address:"/>
            <citem value="Remote" name="-initRemoteWithProtocolFamily:socketType:protocol:address:"/>
        </constructor>
        <constructor signature="NSURL::String" type="URLType">
            <citem value="Any" name="-initWithString:"/>
            <citem value="FileURL" name="-initFileURLWithPath:"/>
        </constructor>
        <constructor signature="NSURLProtectionSpace::StringintStringStringString" type="ServerType">
            <citem value="Default" name="-initWithHost:port:protocol:realm:authenticationMethod:"/>
            <citem value="Proxy" name="-initWithProxyHost:port:type:realm:authenticationMethod:"/>
        </constructor>

        <!-- resetnames sets the names to have a generic naming convention, instead of the given form the include file -->
        <constructor signature="UIColor::floatfloatfloatfloat" type="Colorspace" resetnames="true">
            <citem value="RGBA" name="-initWithHue:saturation:brightness:alpha:"/>
            <citem value="HSBA" name="-initWithRed:green:blue:alpha:"/>
        </constructor>

        <!-- Ignore these multiple constructors. We NEED to define them to acknowledge -->
        <constructor signature="NSNumber::byte" type=""/>
        <constructor signature="NSNumber::short" type=""/>
        <constructor signature="NSNumber::int" type=""/>
        <constructor signature="NSNumber::long" type=""/>

        <!-- handle invalid methods here, e.g. [NSObject new]. Give empty string to ignore this method -->
        <!-- Note the +/- in front of the definition, to distinguish between instance & static methods -->
        <!--  Proposed solution: Make it part of <class> tag. Example is below.
                <class name="UITableView">
                    <selector name="-UITableView:load:" map-to="loadBundle"/>
                    <selector name="-UITableView:getDelegate:" map-to="getTableDelegate"/> 
                </class> 
         -->
        <method signature="+NSObject:new:" name=""/>
        <method signature="+NSObject:class:" name="getClassStatic"/>
        <method signature="-NSObject:class:" name="getClassInstance"/>
        <method signature="+NSProxy:class:" name="getProxyClass"/>
        <method signature="+NSNull:null:" name="Null"/>
        <method signature="-NSNull:load:" name="loadBundle"/>
        <method signature="-NSManagedObject:observationInfo:" name="observationInfoAsObject"/>
        <method signature="-NSCondition:wait:" name="waitCondition"/>
        <method signature="-NSHTTPCookie:version:" name="versionCookie"/>
        <method signature="-NSBundle:load:" name="loadBundle"/>
        <method signature="-UITableView:load:" name="loadBundle"/>
        <method signature="-UITableView:getDelegate:" name="getTableDelegate"/>
        <method signature="-UIImageView:setAnimationDuration:double" name="setImageAnimationDuration"/>
        <method signature="-UITextView:getDelegate:" name="getTextDelegate"/>
        <method signature="+CATransaction:valueForKey:String" name="valueForKeyInCATransaction"/>
        <method signature="-NSMachPort:delegate:" name="getMatchPortDelegate"/>
        <method signature="-SKProductsRequest:getDelegate:" name="getRequestDelegate"/>
        <method signature="-CGImageDestination:finalize:" name="finalizeCGImage"/>
    </conflicts>

    <!-- Used in procedurals while naming parsing, to eliminate inconsistencies -->
    <namechanges>
        <!-- constant canonicals: use these entries to trim the beginning of a constant with a value more meaninful in Java -->
        <namechange prefix="k"/>
        <namechange prefix="al" to="Al"/>
        <namechange prefix="alc" to="Alc"/>
        <namechange prefix="__"/>
        <namechange prefix="_" />
        <namechange prefix="opaque"/>
    </namechanges>

    <!-- Used in CObject, to define that an object is a delegate, so that the selector names should be more agressively trimmed -->
    <delegates>
        <delegate pattern=".*Client$"/>
        <delegate pattern=".*Delegate$"/>
    </delegates>
    
    <!-- The below classes are currently ignored while generating the C wrappers-->
    <ignorelist>
        <ignore name = "FS"/>
        <ignore name = "SEL"/>     
        <ignore name = "IMP"/>
        <ignore name = "Reference"/>
        
        <ignore name = "SecTrust"/>
        <ignore name = "SecCertificate"/>
        <ignore name = "SecKey"/>
        <ignore name = "SecIdentity"/>
        <ignore name = "Protocol"/>
        
        <ignore name = "NSZone"/>
        <ignore name = "NSConnection"/>
        <ignore name = "NSHost"/>
        <ignore name = "NSURLHandle"/>
        <ignore name = "CFData"/>
        <ignore name = "CFArray"/>
        <ignore name = "CFDictionary"/>
        <ignore name = "CGPDFArray"/>
        <ignore name = "CGPDFObject"/>    
        <ignore name = "CGPDFDictionary"/>
        <ignore name = "CFDictionary"/> <!--  Multi-level hierarchy of CF opaque type not handled yet -->
        
          <!-- The extraction of variables for the below structures is not trivial  -->
        <ignore name = "NSDecimal"/> 
        <ignore name = "MIDIValueMap"/>
        <ignore name = "IUnknownVTbl"/>
        <ignore name = "MIDIDriverInterface"/>
        <ignore name = "CVPlanarPixelBufferInfo"/>
    </ignorelist>
    
    <returntypes>
        <type name="Object" map="NSObject"/>
        <type name="byte" map="Byte"/>
        <type name="boolean" map="BOOL"/>
        <type name="String" map="NSString"/>
        <type name="List" map="NSArray"/>
        <type name="Set" map="NSSet"/>
        <type name="Map" map="NSDictionary"/>
    </returntypes>
    
    <class name="UIView">
        <alias name ="UILayoutContainerView"/>        
        <selector name="-initWithFrame:" autoReleasePool="true"/>       
        <selector name="-drawRect:" delegate="true"/>
        <property name="subviews" type="List&lt;UIView&gt;"/>
    </class>
    
    <class name="UIViewController">
        <reference class="NSString"/>
        <reference class="UIEvent"/>
                
        <!-- 
        If an application class subclasses UIViewController and overrides the method 
        'loadView', in the  overridden method, if a call is made to super's loadView 
        the wrapper code generated should in turn make a call to Objective-C parent 
        class's loadView. The default code that is generated automatically calls self's 
        loadView and not the super class's method. This will lead to infinite looping 
        and hence the injection of the below code is required.
         -->
        <code language="c" mode="after">
            <![CDATA[@interface UIViewControllerWrapper (UIViewControllerWrapperCategory)
            - (void) superLoadView;
            - (void) superViewDidLoad;
            - (void) superViewDidDisappear:(BOOL) animated;
            @end

            @implementation UIViewControllerWrapper (UIViewControllerWrapperCategory)
            - (void) superLoadView {
                [super loadView];
            }
            - (void) superViewDidLoad {
                [super viewDidLoad];
            }
            - (void) superViewDidDisappear:(BOOL) animated{
                [super viewDidDisappear:animated];
            }
            @end ]]>
        </code>
        
        <selector name="-loadView" delegate="true">
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                [thiz superLoadView]; ]]>
            </code>
        </selector>
        
        <selector name="-viewDidLoad" delegate="true">
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                [thiz superViewDidLoad]; ]]>
            </code>
        </selector>
        
        <selector name="-viewDidDisappear:" delegate="true">
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                [thiz superViewDidDisappear:n1]; ]]>
            </code>
        </selector>
        
        <selector name="-viewWillAppear:" delegate="true"/>
        <selector name="-viewDidAppear:" delegate="true"/>
        <selector name="-shouldAutorotateToInterfaceOrientation:" delegate="true"/>
        <selector name="-willAnimateRotationToInterfaceOrientation:duration:" delegate="true"/>
    </class>    
    
    <!-- TODO: The information no-internal-constructor should be emitted from advisor.
    This information will be compensated by adding code injection at class level -->
    
    <class name="NSObject" no-internal-constructor="true">
        <reference class="NSString"/>
        <reference class="Class"/>
        
        <selector name="-finalize" override="true">
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                [thiz removeExtraMembers];
                [thiz release];]]>
            </code>
        </selector>
    </class>
    
    <class name="UIControl">
        <selector name="-addTarget:action:forControlEvents:">
            <signature>
                <arg type="UIControlDelegate" retain="true"/>
                <arg type="int"/>
            </signature> 
            
            <!--  This code snippet is injected for addTarget since no information related
            to one of the arguments- UIControlDelegate is available in the parsed data.
            UIControlDelegate is an externally injected file, and hence code injection 
            becomes necessary here -->   
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                org_xmlvm_ios_UIControlDelegate_Wrapper* jwrapper = __ALLOC_INIT_DELEGATE_WRAPPER_org_xmlvm_ios_UIControlDelegate(n1);
                [jwrapper->nativeDelegateWrapper_ addSource: jthiz: thiz];
                [thiz addTarget:jwrapper->nativeDelegateWrapper_ action:@selector(raiseEvent:control:) forControlEvents:n2];
    			objc_setAssociatedObject(thiz, &key, jwrapper->nativeDelegateWrapper_, OBJC_ASSOCIATION_RETAIN);
    			[jwrapper->nativeDelegateWrapper_ release];
    			XMLVMUtil_ArrayList_add(reference_array,n1);]]>
            </code>
        </selector>            
    </class>
    
    <class name="UILabel">
        <alias name ="UITableViewLabel"/>
    </class>
    
    <class name="NSTimer">
    
    	<code language="c" mode="after">
    		<![CDATA[bool alloced = false;
    		// Set this flag to true if NSTimer is created using alloc/init 
    		// in which case the instance has to be released in the finalize. 
    		// If the NSTimer was created using the helper methods, the finalize 
    		// need not release he instance since it is taken care of by iOS]]>
    	</code>
    	
    	<alias name="__NSCFTimer"/>
    	
    	<selector name="+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:">
    		<signature>
    			<arg type="double"/>
    			<arg type="NSTimerDelegate" retain="true"/>
    			<arg type="Object"/>
    			<arg type="boolean"/>
    		</signature>
    		<code language="c" mode="replace">
    			<![CDATA[org_xmlvm_ios_NSTimerDelegate_Wrapper* jwrapper = __ALLOC_INIT_DELEGATE_WRAPPER_org_xmlvm_ios_NSTimerDelegate(n2);
				org_xmlvm_ios_NSTimer* timer = __NEW_org_xmlvm_ios_NSTimer();
				NSTimer* nsTimer = [NSTimer scheduledTimerWithTimeInterval:n1 target:jwrapper->nativeDelegateWrapper_ selector:@selector(timerEvent:) userInfo:NULL repeats:n4];	
				objc_setAssociatedObject(nsTimer, &key, jwrapper->nativeDelegateWrapper_, OBJC_ASSOCIATION_RETAIN);
				[jwrapper->nativeDelegateWrapper_ release];
				org_xmlvm_ios_NSObject_INTERNAL_CONSTRUCTOR(timer, nsTimer);
				XMLVMUtil_ArrayList_add(reference_array,n2);
				return timer;]]>
    		</code>		
    	</selector>
    	
    	<injected-method name="finalize" modifier="public" override="true">
            <signature>
                <return type="void"/>
            </signature>
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                if(alloced) {
                	[thiz removeExtraMembers];
                	[thiz release];
                }]]>
            </code>
        </injected-method>
    </class>
    
    <class name="UIFont">
        <alias name ="UICFFont"/>
    </class>
    
    <class name="UIEvent">
        <alias name ="UITouchesEvent"/>
    </class>
    
    <class name="UIColor">
        <alias name ="UIDeviceRGBColor"/>
        <alias name ="UICachedDeviceWhiteColor"/>
    </class>
    
    <class name="UIButton">
        <alias name ="UIRoundedRectButton"/>
    </class>
    
    <class name="NSDictionary">
        <alias name ="__NSCFDictionary"/>
        <selector name="-allKeys" autoReleasePool="true"/>
        <selector name="-objectsForKeys:notFoundMarker:" autoReleasePool="true"/>
    </class> 
    
    <class name="NSString">
        <selector name="-substringToIndex:" autoReleasePool="true"/>
        <reference class="NSError"/>
        
        <injected-method name="toString" modifier="public">
            <signature>
                <return type="String"/>
            </signature>
            <code language="c" mode="replace">
                <![CDATA[return fromNSString(((org_xmlvm_ios_NSObject*) me)->fields.org_xmlvm_ios_NSObject.wrappedObj);]]>
            </code>
        </injected-method>
    </class>
    
    <class name="UITabBarController">
        <property name="viewControllers" type="List&lt;UIViewController&gt;"/>
        <property name="delegate" type="UITabBarControllerDelegate" replace="true"/>
    </class> 

    <class name="UITabBar">
		<property name="delegate" type="UITabBarDelegate" replace="true"/>
	</class>
    
    <class name="UIPopoverController">
		<property name="delegate" type="UIPopoverControllerDelegate" replace="true"/>
	</class>
	
	<class name="UINavigationController">
		<property name="delegate" type="UINavigationControllerDelegate" replace="true"/>
	</class>
	
	<class name="UIGestureRecognizer">
		<property name="delegate" type="UIGestureRecognizerDelegate" replace="true"/>
	</class>
	
	<class name="UIScrollView">
		<property name="delegate" type="UIScrollViewDelegate" replace="true"/>
	</class>
	
	<class name="UISearchBar">
		<property name="delegate" type="UISearchBarDelegate" replace="true"/>
	</class>
	
	<class name="UISplitViewController">
		<property name="delegate" type="UISplitViewControllerDelegate" replace="true"/>
	</class>
	
	<class name="MKMapView">
		<property name="delegate" type="MKMapViewDelegate" replace="true"/>
	</class>

    <class name="UITableView">
        <property name="dataSource" type="UITableViewDataSource" replace="true"/>
        <property name="delegate" type="UITableViewDelegate" replace="true"/>
        
        <selector name="-indexPathsForRowsInRect:">
            <return type="List&lt;NSIndexPath&gt;"/>
        </selector>
    </class> 
    
    <class name="UIPickerView">
        <property name="dataSource" type="UIPickerViewDataSource" replace="true"/>
        <property name="delegate" type="UIPickerViewDelegate" replace="true"/>
    </class>
    
    <class name="UIPickerViewDataSource">
    	<selector name="numberOfComponentsInPickerView:" mandatory="true"/>
    	<selector name="pickerView:numberOfRowsInComponent:" mandatory="true"/>
    </class>
    
    <class name="UITableViewDelegate">
    
        <!--  
        TODO: Using respondsToSelector: in generated macros for delegate methods
        to identify if an application has overridden a specific delegate method 
        would eliminate the use of 'default-value' 
         -->
        <selector name="-tableView:heightForRowAtIndexPath:">
            <return default-value="tableView.getRowHeight()"/>
        </selector>
        
        <selector name="-tableView:heightForHeaderInSection:">
            <return default-value="tableView.getStyle()==0? 10:22"/>
        </selector>
        
        <selector name="-tableView:shouldIndentWhileEditingRowAtIndexPath:">
            <return default-value="true"/>
        </selector>
        
         <selector name="-tableView:willSelectRowAtIndexPath:">
            <return default-value="indexPath"/>
        </selector>
    </class>
       
    <class name="UITableViewDataSource">
        <selector name="-numberOfSectionsInTableView:">
            <return default-value="1"/>
        </selector>
        
        <selector name="-tableView:cellForRowAtIndexPath:" mandatory="true"/>
        <selector name="-tableView:numberOfRowsInSection:" mandatory="true"/>
    </class>        
    
    <class name="UIAccelerometer">
        <property name="delegate" type="UIAccelerometerDelegate" replace="true"/>
    </class>
    
<!--    <class name="UIImagePickerController">  --> 
        
        <!-- This method is injected externally since UIImagePickerController
        has property 'delegate' which can be either set to UINavigationControllerDelegate
        or UIImagePickerControllerDelegate. By default, only one setter is generated, 
        in this case, for UINavigationControllerDelegate. Hence a setter for
        UIImagePickerControllerDelegate has to be injected. Ultimate solution
        would be to generate the setter automatically while parsing the header.
         -->
 <!--         <injected-method name="setDelegate" modifier="public">
        	<signature>
        	    <return type="void"/>
        	    <arg type="UIImagePickerControllerDelegate" replace="true"/>
        	</signature>
        	<code language="c" mode="replace">
        	    <![CDATA[XMLVM_VAR_THIZ;
                org_xmlvm_ios_UIImagePickerControllerDelegate_Wrapper* jwrapper = __ALLOC_INIT_DELEGATE_WRAPPER_org_xmlvm_ios_UIImagePickerControllerDelegate(n1);
                [jwrapper->nativeDelegateWrapper_ addSource: jthiz: thiz];
                [thiz setDelegate:jwrapper->nativeDelegateWrapper_];
                jthiz->fields.org_xmlvm_ios_UIImagePickerController.delegate = n1;
                ]]>                       
        	</code>
        </injected-method>
    </class>  --> 
    
    <class name="CLLocationManager">
        <property name="delegate" type="CLLocationManagerDelegate" replace="true"/>
    </class>
    
    <class name="UITextField">
        <property name="delegate" type="UITextFieldDelegate" replace="true"/>
    </class>
    
    <class name="UITextFieldDelegate">
        <selector name="-textFieldShouldEndEditing:">
            <return default-value="true"/>
        </selector>
        
        <selector name="-textFieldShouldClear:">
            <return default-value="true"/>
        </selector>
        
        <selector name="-textFieldShouldBeginEditing:">
            <return default-value="true"/>
        </selector>     
        
        <selector name="-textField:shouldChangeCharactersInRange:replacementString:">
            <return default-value="true"/>
        </selector>
        
    </class>
    
    <class name="AVAudioPlayer">
    	<reference class="NSError"/>
        <property name="delegate" type="AVAudioPlayerDelegate" replace="true"/>
    </class>
    
    <class name="UIApplication">
        <!-- Currently generating code for UIApplication.main() using the below -->
        <injected-method name="main" modifier="public static">
            <signature>
                <arg type="String[]"/>
                <arg type="Class&lt;? extends UIApplication&gt;"/>
                <arg type="Class&lt;? extends UIApplicationDelegate&gt;"/>
                <return type="void"/>
            </signature>
            <code language="c" mode="replace">
                <![CDATA[setAppToRun((*(JAVA_OBJECT (*)(JAVA_OBJECT)) ((java_lang_Class*) n3)->tib->vtable[XMLVM_VTABLE_IDX_java_lang_Class_newInstance__])(n3));
                NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];
                UIApplicationMain(0 /*argc*/, nil /*argv*/, @"UIApplication", @"UIApplicationDelegateWrapper");
                [pool release]; ]]>
            </code>
        </injected-method>
        
        <property name="delegate" type="UIApplicationDelegate" replace="true"/>
        
    </class>
    
    <class name="UIApplicationDelegate">
        <reference class="NSDictionary"/>
        <selector name="-application:didFinishLaunchingWithOptions:">
            <arg type="UIApplication"/>
            <arg type="Map&lt;String, Object&gt;"/>
            <return default-value="true"/>
        </selector>
        
        <selector name="-application:handleOpenURL:">
            <return default-value="true"/>
        </selector>
    </class>
    
    <class name="CALayer">
        <reference class="NSArray"/>
    </class>
    
    <class name="NSData">
        <reference class="NSString"/>
        <reference class="NSError"/>        
    </class>
    
    <class name="NSURL">
        <reference class="NSString"/>
        <reference class="NSError"/>
    </class>
    
    <class name="NSURLRequest">
        <selector name="+requestWithURL:">
          <signature>
            <arg type="NSURL"/>
            <return type="NSURLRequest"/>
          </signature>
        </selector>
        <selector name="+requestWithURL:cachePolicy:timeoutInterval:">
          <signature>
            <arg type="NSURL"/>
            <arg type="int"/>
            <arg type="double"/>
            <return type="NSURLRequest"/>
          </signature>
        </selector>
    </class>
    
    <class name="UIAlertView">
        <reference class="UILabel"/>
    </class>
    
    <class name="UIImage">
        <reference class="NSString"/>

        <code language="c" mode="before">
            <![CDATA[
@interface CroppedImageArgs : NSObject {
@public    CGRect cropRect;
@public    UIImage* croppedImage;
}
@end

@implementation CroppedImageArgs
@end

@interface UIImage(cat_UIImage)
@end

@implementation UIImage(cat_UIImage)
/*
 * We perform the cropping on the main thread in case the cropping is
 * done in a thread. Quartz is not thread-safe.
 */
- (void) cropImage: (id) args
{
    CGRect cropRect = ((CroppedImageArgs*) args)->cropRect;
    CGSize size = cropRect.size;
    UIGraphicsBeginImageContext(size);
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGImageRef subImage = CGImageCreateWithImageInRect([self CGImage], cropRect);
    CGRect myRect = CGRectMake(0.0f, 0.0f, size.width, size.height);
    CGContextScaleCTM(context, 1.0f, -1.0f);
    CGContextTranslateCTM(context, 0.0f, -size.height);
    CGContextFlush(context);
    CGContextDrawImage(context, myRect, subImage);
    CGContextFlush(context);
    UIImage* croppedImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    [croppedImage retain];
    CGImageRelease(subImage);
    ((CroppedImageArgs *) args)->croppedImage = croppedImage;
}
@end
]]>
        </code>

  <!--       <selector name="UIImageWriteToSavedPhotosAlbum">
            <signature>
                <arg type="UIImageHandler" replace="true"/>
                <arg type="Object"/>
            </signature> 
            <code language="c" mode="replace">
                <![CDATA[XMLVM_VAR_THIZ;
                XMLVM_VAR_IOS(NSObject, context, n2);
                org_xmlvm_ios_UIImageHandler_Wrapper* jwrapper = __ALLOC_INIT_DELEGATE_WRAPPER_org_xmlvm_ios_UIImageHandler(n1);
	            jthiz->fields.org_xmlvm_ios_UIImage.handler = n1;
                [jwrapper->nativeDelegateWrapper_ addSource: jthiz: thiz];
                UIImageWriteToSavedPhotosAlbum(thiz, jwrapper->nativeDelegateWrapper_, @selector(image: didFinishSavingWithError: contextInfo:),context );]]>
            </code>
        </selector>    -->
        <injected-method name="cropImage" modifier="public">
            <signature>
                <arg type="int"/>
                <arg type="int"/>
                <arg type="int"/>
                <arg type="int"/>
                <return type="UIImage"/>
            </signature>
            <code language="c" mode="replace">
                <![CDATA[
    XMLVM_VAR_THIZ;
    XMLVM_VAR_INT(x, n1);
    XMLVM_VAR_INT(y, n2);
    XMLVM_VAR_INT(width, n3);
    XMLVM_VAR_INT(height, n4);
    
    CroppedImageArgs* args = [[CroppedImageArgs alloc] init];
    args->cropRect = CGRectMake(x, y, width, height);
    [thiz performSelectorOnMainThread:@selector(cropImage:) withObject:args waitUntilDone:TRUE];
    UIImage* croppedImage = args->croppedImage;
    [args release];
    JAVA_OBJECT obj = xmlvm_get_associated_c_object(croppedImage);
    [croppedImage release];
    return obj;
]]>
            </code>
        </injected-method>
                
    </class>
    
    <class name="UIResponder">
        <reference class="UITouch"/>
        <selector name="-touchesBegan:withEvent:" delegate="true">
            <arg type="Set&lt;UITouch&gt;"/>
            <arg type="UIEvent"/>
        </selector>
        <selector name="-touchesMoved:withEvent:" delegate="true">
            <arg type="Set&lt;UITouch&gt;"/>
            <arg type="UIEvent"/>
        </selector>
        <selector name="-touchesEnded:withEvent:" delegate="true">        
            <arg type="Set&lt;UITouch&gt;"/>
            <arg type="UIEvent"/>
        </selector>
        <selector name="-touchesCancelled:withEvent:" delegate="true">        
            <arg type="Set&lt;UITouch&gt;"/>
            <arg type="UIEvent"/>
        </selector>
    </class>
    
    <class name="CGRect">
        <reference class="CGPoint"/>
        <reference class="CGSize"/>
    </class>
    
    <class name="UITabBarControllerDelegate">
        <reference class="NSArray"/>
    </class>
    
    <class name="UITabBarDelegate">
        <reference class="NSArray"/>
    </class>
    
    <class name="CAAction">
        <reference class="NSDictionary"/>
    </class> 
    
    <class name = "CGContext">
        <opaque base-type = "CFType"/>
        <selector name="CGContextDrawPDFDocument" ignore="true"/>
    </class>
    
    <class name = "CFRunLoop">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CFAllocator">
        <opaque base-type = "CFType"/>
        <reference class="CFAllocatorContext"/>
    </class>
    
    <class name = "CFURL">
        <opaque base-type = "CFType"/>
        <reference class="CFError"/>
    </class>
    
    <class name = "CFRunLoopObserver">
    	<reference class="CFRunLoopObserverContext"/>
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CFRunLoopSource">
    	<reference class="CFRunLoopSourceContext"/>
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGImage">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGColor">
        <opaque base-type = "CFType"/>
        
        <selector name="CGColorCreateGenericGray" ignore="true"/>
        <selector name="CGColorCreateGenericRGB" ignore="true"/>
        <selector name="CGColorCreateGenericCMYK" ignore="true"/>
        <selector name="CGColorCreateGenericColor" ignore="true"/>
        <selector name="CGColorGetConstantColor" ignore="true"/>

    </class>
    
    <class name = "CGPattern">
    	<reference class="CGPatternCallbacks"/>
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGPDFDocument">
        <opaque base-type = "CFType"/>
        
        <!-- This is a quick fix for methods not-appicable to iOS which throw compile error.
        This informations should be parsed from the header files ultimately -->
        <selector name = "CGPDFDocumentGetMediaBox" ignore="true"/>
        <selector name = "CGPDFDocumentGetCropBox" ignore="true"/>
        <selector name = "CGPDFDocumentGetBleedBox" ignore="true"/>
        <selector name = "CGPDFDocumentGetTrimBox" ignore="true"/>
        <selector name = "CGPDFDocumentGetArtBox" ignore="true"/>
        <selector name = "CGPDFDocumentGetRotationAngle" ignore="true"/> 
    </class>
    
    <class name = "CGFont">
        <opaque base-type = "CFType"/>
        
        <selector name="CGFontCreateWithPlatformFont" ignore="true"/>
    </class>
    
    <class name = "CGGradient">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGDataProvider">
    	<reference class="CGDataProviderSequentialCallbacks"/>
    	<reference class="CGDataProviderDirectAccessCallbacks"/>
    	<reference class="CGDataProviderDirectCallbacks"/>
    	<reference class="CGDataProviderCallbacks"/>
    	<selector name="CGDataProviderCreateDirectAccess" ignore="true"/>
    	<selector name="CGDataProviderCreate" ignore="true"/>
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGPDFPage">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGShading">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGFunction">
        <opaque base-type = "CFType"/>
        <reference class="CGFunctionCallbacks"/>
    </class>
    
    <class name = "NSMutableData">
    	<reference class="NSError"/>
    </class>
    
    <class name = "CGColorSpace">
        <opaque base-type = "CFType"/>
        <selector name="CGColorSpaceCopyName" ignore="true"/>
        <selector name="CGColorSpaceCreateWithPlatformColorSpace" ignore="true"/>
    </class>
    
    <class name = "CGLayer">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CFError">
        <opaque base-type = "CFType"/>
    </class>
    
    <class name = "CGPath">
    	<reference class="CGAffineTransform"/>
        <opaque base-type = "CFType"/>
    </class>

    <class name="CFType" no-internal-constructor="true"/> 
    
    <class name = "NSStream">
    	<reference class="NSOutputStream"/>
    	<reference class="NSInputStream"/>
    </class>
    
    <class name = "CFRunLoopTimer">
    	<opaque base-type="CFType"/>
    	<reference class="CFRunLoopTimerContext"/>
    </class>
    
    <class name = "NSURLConnection">
    	<reference class="NSURLResponse"/>
    	<reference class="NSError"/>
    </class>
    
     <class name = "UIWindow">
     
        <code language="c" mode="after">
                <![CDATA[JAVA_OBJECT window;]]>
        </code>
            
    	<selector name = "-initWithFrame:">
    	    <code language="c" mode="after">
                <![CDATA[window = me;]]>
            </code>
    	</selector>
    </class>  
    
    <class name = "NSFileManager">
    	<reference class="NSError"/>
    </class>
    
    <class name = "NSBundle">
    	<reference class="NSError"/>
    </class>
    
    <class name = "MKMapPoint">
    	<!-- Ignoring this method at the moment. Needs a fix for the
    	Heuristics applied to generate method names. In this case, the method
    	name generated is sPerMeterAtLatitude and is placed in MKMapPoint class.
    	The right thing to do here, is to place it in MapKit class instead
    	and retain the method name as MKMapPointsPerMeterAtLatitude  -->
    	<selector name = "MKMapPointsPerMeterAtLatitude" ignore = "true"/> 
    </class> 

</advisor>

